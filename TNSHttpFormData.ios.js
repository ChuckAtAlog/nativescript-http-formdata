"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TNSHttpFormData = /** @class */ (function () {
    function TNSHttpFormData() {
    }
    // upload(url: string, data: NSData, parameterName: string, fileName: string, contentType) {
    TNSHttpFormData.prototype.upload = function (url, params) {
        return new Promise(function (resolve, reject) {
            var multipartFormData = OMGMultipartFormData.new();
            for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {
                var param = params_1[_i];
                multipartFormData.addFileParameterNameFilenameContentType(param.data, param.parameterName, param.fileName, param.contentType);
            }
            var request = OMGHTTPURLRQ.POSTError(url, multipartFormData);
            NSURLConnection.sendAsynchronousRequestQueueCompletionHandler(request, NSOperationQueue.currentQueue, function (response, data, error) {
                if (error) {
                    reject(error);
                    return;
                }
                var httpResponse = response;
                switch (httpResponse.statusCode) {
                    case 200:
                        resolve(true);
                        break;
                    case 500:
                        reject('Something went wrong on server');
                        break;
                    default:
                        resolve(false);
                        break;
                }
            });
        });
    };
    return TNSHttpFormData;
}());
exports.TNSHttpFormData = TNSHttpFormData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVE5TSHR0cEZvcm1EYXRhLmlvcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlROU0h0dHBGb3JtRGF0YS5pb3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQTtJQUNJO0lBRUEsQ0FBQztJQUVELDRGQUE0RjtJQUM1RixnQ0FBTSxHQUFOLFVBQU8sR0FBVyxFQUFFLE1BQW1DO1FBQ25ELE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQy9CLElBQUksaUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDbkQsR0FBRyxDQUFBLENBQWMsVUFBTSxFQUFOLGlCQUFNLEVBQU4sb0JBQU0sRUFBTixJQUFNO2dCQUFuQixJQUFJLEtBQUssZUFBQTtnQkFDVCxpQkFBaUIsQ0FBQyx1Q0FBdUMsQ0FDckQsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQzNFO1lBRUQsSUFBSSxPQUFPLEdBQXdCLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDbEYsZUFBZSxDQUFDLDZDQUE2QyxDQUN6RCxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLFVBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLO2dCQUMxRCxFQUFFLENBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNQLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDZCxNQUFNLENBQUM7Z0JBQ1gsQ0FBQztnQkFDRCxJQUFNLFlBQVksR0FBeUMsUUFBUSxDQUFDO2dCQUNwRSxNQUFNLENBQUEsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztvQkFDN0IsS0FBSyxHQUFHO3dCQUNKLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDbEIsS0FBSyxDQUFDO29CQUNOLEtBQUssR0FBRzt3QkFDSixNQUFNLENBQUMsZ0NBQWdDLENBQUMsQ0FBQzt3QkFDN0MsS0FBSyxDQUFDO29CQUNOO3dCQUNJLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDbkIsS0FBSyxDQUFDO2dCQUNWLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0FBQyxBQXBDRCxJQW9DQztBQXBDWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFROU0h0dHBGb3JtRGF0YVBhcmFtIH0gZnJvbSBcIi4vaW5kZXhcIjtcblxuXG5leHBvcnQgY2xhc3MgVE5TSHR0cEZvcm1EYXRhIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIH1cblxuICAgIC8vIHVwbG9hZCh1cmw6IHN0cmluZywgZGF0YTogTlNEYXRhLCBwYXJhbWV0ZXJOYW1lOiBzdHJpbmcsIGZpbGVOYW1lOiBzdHJpbmcsIGNvbnRlbnRUeXBlKSB7XG4gICAgdXBsb2FkKHVybDogc3RyaW5nLCBwYXJhbXM6IEFycmF5PFROU0h0dHBGb3JtRGF0YVBhcmFtPik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbGV0IG11bHRpcGFydEZvcm1EYXRhID0gT01HTXVsdGlwYXJ0Rm9ybURhdGEubmV3KCk7ICAgIFxuICAgICAgICAgICAgZm9yKGxldCBwYXJhbSBvZiBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBtdWx0aXBhcnRGb3JtRGF0YS5hZGRGaWxlUGFyYW1ldGVyTmFtZUZpbGVuYW1lQ29udGVudFR5cGUoXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtLmRhdGEsIHBhcmFtLnBhcmFtZXRlck5hbWUsIHBhcmFtLmZpbGVOYW1lLCBwYXJhbS5jb250ZW50VHlwZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZXF1ZXN0OiBOU011dGFibGVVUkxSZXF1ZXN0ID0gT01HSFRUUFVSTFJRLlBPU1RFcnJvcih1cmwsIG11bHRpcGFydEZvcm1EYXRhKTtcbiAgICAgICAgICAgIE5TVVJMQ29ubmVjdGlvbi5zZW5kQXN5bmNocm9ub3VzUmVxdWVzdFF1ZXVlQ29tcGxldGlvbkhhbmRsZXIoXG4gICAgICAgICAgICAgICAgcmVxdWVzdCwgTlNPcGVyYXRpb25RdWV1ZS5jdXJyZW50UXVldWUsIChyZXNwb25zZSwgZGF0YSwgZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaHR0cFJlc3BvbnNlOiBOU0hUVFBVUkxSZXNwb25zZSA9IDxOU0hUVFBVUkxSZXNwb25zZT5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIwMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDUwMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ1NvbWV0aGluZyB3ZW50IHdyb25nIG9uIHNlcnZlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0iXX0=